{
  "address": "0xCc66F060689F2D688e9Af6B410C22632b43683e0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "generator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "context",
          "type": "bytes32"
        }
      ],
      "name": "TasksAvailable",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_context",
          "type": "bytes32"
        }
      ],
      "name": "notify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdf2444d0a26e0cbecbb2bb8267152e800a8d808aa6b79c6d5702403d33f7f0d",
  "receipt": {
    "to": null,
    "from": "0x3BA9F711C9808902f6a200d3715ba8a7e4D8b63f",
    "contractAddress": "0xCc66F060689F2D688e9Af6B410C22632b43683e0",
    "transactionIndex": 0,
    "gasUsed": "42832076",
    "logsBloom": "0xffffffffffffffffffffffffffbefffffffffffffffff7fffffffebffffffdffffffffffff7ffffffffffffffffffffdffffffff7ffefffffffffffffffffffffffdffffffffffffffffffffffff7fffffefffffffffffffffffffbfffffffffffffffffffffffffffffff7fffffffff7fdffffffdfffffffff7fffffffffffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffffefffffffffffffffffffffffffffdfffffffffffffffffff7fffffffffbfefffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdffffbfffffffffffffffffffdf",
    "blockHash": "0xa1ac951124f8e1d430f0abe81c3bd2979bf1892b609d62ca04552f7d788b28b6",
    "transactionHash": "0xcdf2444d0a26e0cbecbb2bb8267152e800a8d808aa6b79c6d5702403d33f7f0d",
    "logs": [],
    "blockNumber": 315201,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9a78d2354af0fbf02b37e026e3bfcca5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"generator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"context\",\"type\":\"bytes32\"}],\"name\":\"TasksAvailable\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_context\",\"type\":\"bytes32\"}],\"name\":\"notify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The methods in this contract are not marked with `override` are not guaranteed to be in the next version of the contract.\",\"kind\":\"dev\",\"methods\":{\"notify(bytes32)\":{\"params\":{\"_context\":\"Some indexed data to be emitted with the event for listeners to filter on.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"notify()\":{\"notice\":\"Alerts any listening task runners that there are new tasks available.\"},\"notify(bytes32)\":{\"notice\":\"Alerts any listening task runners that there are new tasks available.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tasks/hub/TaskHub.sol\":\"TaskHubV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/tasks/hub/ITaskHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ITaskHubV1 is IERC165 {\\n    event TasksAvailable(address indexed generator, bytes32 indexed context);\\n\\n    /// Alerts any listening task runners that there are new tasks available.\\n    function notify() external;\\n\\n    /// Alerts any listening task runners that there are new tasks available.\\n    /// @param _context Some indexed data to be emitted with the event for listeners to filter on.\\n    function notify(bytes32 _context) external;\\n}\\n\",\"keccak256\":\"0x7d0e005a875af6b09d0700af1c38090b4bcce96fa4cd68ae9a908bcc9e4d3d74\",\"license\":\"MIT\"},\"contracts/tasks/hub/TaskHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {ITaskHubV1} from \\\"./ITaskHub.sol\\\";\\n\\n/// @dev The methods in this contract are not marked with `override` are not guaranteed to be in the next version of the contract.\\ncontract TaskHubV1 is ITaskHubV1 {\\n    function notify() external override {\\n        emit TasksAvailable(msg.sender, \\\"\\\");\\n    }\\n\\n    function notify(bytes32 _context) external override {\\n        emit TasksAvailable(msg.sender, _context);\\n    }\\n\\n    function supportsInterface(bytes4 _interfaceId) public pure override returns (bool) {\\n        return _interfaceId == type(ITaskHubV1).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc0e4b9c97e7bd29c061e12168cfc9e53b1f9e4baa77944a409aee564677026ac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576101ba908161001c8239f35b600080fdfe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146100f757508063138b10841461009c5763899f58981461004257600080fd5b3461009957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100995780337fab04395d906559e27643e4acf5cd0debe6a355247cd81c101bd0855d87dcc2608280a380f35b80fd5b50346100995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009957600435337fab04395d906559e27643e4acf5cd0debe6a355247cd81c101bd0855d87dcc2608380a380f35b9050346101805760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018057600435917fffffffff00000000000000000000000000000000000000000000000000000000831680930361009957507f9a14481c00000000000000000000000000000000000000000000000000000000602092148152f35b5080fdfea2646970667358221220e630a31f8ae599d7fb5dc4cb0e7d31cae28e21dd30034f3853d9f66a866faeb864736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a7146100f757508063138b10841461009c5763899f58981461004257600080fd5b3461009957807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100995780337fab04395d906559e27643e4acf5cd0debe6a355247cd81c101bd0855d87dcc2608280a380f35b80fd5b50346100995760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009957600435337fab04395d906559e27643e4acf5cd0debe6a355247cd81c101bd0855d87dcc2608380a380f35b9050346101805760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018057600435917fffffffff00000000000000000000000000000000000000000000000000000000831680930361009957507f9a14481c00000000000000000000000000000000000000000000000000000000602092148152f35b5080fdfea2646970667358221220e630a31f8ae599d7fb5dc4cb0e7d31cae28e21dd30034f3853d9f66a866faeb864736f6c63430008120033",
  "devdoc": {
    "details": "The methods in this contract are not marked with `override` are not guaranteed to be in the next version of the contract.",
    "kind": "dev",
    "methods": {
      "notify(bytes32)": {
        "params": {
          "_context": "Some indexed data to be emitted with the event for listeners to filter on."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "notify()": {
        "notice": "Alerts any listening task runners that there are new tasks available."
      },
      "notify(bytes32)": {
        "notice": "Alerts any listening task runners that there are new tasks available."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}