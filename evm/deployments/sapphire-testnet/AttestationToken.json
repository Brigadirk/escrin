{
  "address": "0x960bEAcD9eFfE69e692f727F52Da7DF3601dc80f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedSender",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidQuote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedRegistration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RegistrationExpired",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "TcbId",
          "name": "tcbId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "measurementHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "userdata",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct AttestationToken.Quote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "Attested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_quote",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "baseBlockHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "registrant",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenExpiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct AttestationToken.Registration",
          "name": "_reg",
          "type": "tuple"
        }
      ],
      "name": "attest",
      "outputs": [
        {
          "internalType": "TcbId",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "TcbId",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "attestations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_quote",
          "type": "bytes"
        }
      ],
      "name": "getTcbId",
      "outputs": [
        {
          "internalType": "TcbId",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whom",
          "type": "address"
        },
        {
          "internalType": "TcbId",
          "name": "_tcbId",
          "type": "bytes32"
        }
      ],
      "name": "isAttested",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whom",
          "type": "address"
        }
      ],
      "name": "setTrustedSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fdffab98ab70af6e139f91d31b386e7dcee926a80cc35c58cdb9896f7ecbb23",
  "receipt": {
    "to": null,
    "from": "0x013e84e68AF747DE29F224747011a9c7f8828f08",
    "contractAddress": "0x960bEAcD9eFfE69e692f727F52Da7DF3601dc80f",
    "transactionIndex": 0,
    "gasUsed": "452471",
    "logsBloom": "0x
    "blockHash": "0xcef839c15beb9f66ec5c92a009336e1b3c2926ea544c8770e5dc2aa23186b79b",
    "transactionHash": "0x6fdffab98ab70af6e139f91d31b386e7dcee926a80cc35c58cdb9896f7ecbb23",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 965731,
        "transactionHash": "0x6fdffab98ab70af6e139f91d31b386e7dcee926a80cc35c58cdb9896f7ecbb23",
        "address": "0x960bEAcD9eFfE69e692f727F52Da7DF3601dc80f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000013e84e68af747de29f224747011a9c7f8828f08"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcef839c15beb9f66ec5c92a009336e1b3c2926ea544c8770e5dc2aa23186b79b"
      }
    ],
    "blockNumber": 965731,
    "cumulativeGasUsed": "452471",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x013e84e68AF747DE29F224747011a9c7f8828f08"
  ],
  "numDeployments": 4,
  "solcInputHash": "cfdfe8729a8117db395d779a165bc8d7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedSender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidQuote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegistrationExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"TcbId\",\"name\":\"tcbId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"measurementHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"userdata\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct AttestationToken.Quote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"Attested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_quote\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"baseBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExpiry\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationToken.Registration\",\"name\":\"_reg\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"TcbId\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"TcbId\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"attestations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_quote\",\"type\":\"bytes\"}],\"name\":\"getTcbId\",\"outputs\":[{\"internalType\":\"TcbId\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whom\",\"type\":\"address\"},{\"internalType\":\"TcbId\",\"name\":\"_tcbId\",\"type\":\"bytes32\"}],\"name\":\"isAttested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whom\",\"type\":\"address\"}],\"name\":\"setTrustedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"MismatchedRegistration()\":[{\"notice\":\"The quote did not link to the registration bundle.\"}],\"RegistrationExpired()\":[{\"notice\":\"The registration has expired.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/enclave-identity/AttestationToken.sol\":\"AttestationToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/enclave-identity/AttestationToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ntype TcbId is bytes32;\\n\\n/// The quote did not link to the registration bundle.\\nerror MismatchedRegistration(); // kPomqw==\\n/// The registration has expired.\\nerror RegistrationExpired(); // D+WbwA==\\nerror InvalidQuote(); // +GGAMA==\\n\\ncontract AttestationToken is Ownable {\\n    struct Quote {\\n        bytes32 measurementHash;\\n        bytes32 userdata;\\n    }\\n\\n    struct Registration {\\n        uint256 baseBlockNumber;\\n        bytes32 baseBlockHash;\\n        uint256 expiry;\\n        address registrant;\\n        uint256 tokenExpiry;\\n    }\\n\\n    struct Attestation {\\n        uint256 expiry;\\n    }\\n\\n    event Attested(address indexed requester, TcbId indexed tcbId, Quote quote);\\n\\n    mapping(address => mapping(TcbId => Attestation)) public attestations;\\n\\n    /// Mock attestation component.\\n    address private trustedSender;\\n\\n    constructor(address _trustedSender) {\\n        trustedSender = _trustedSender;\\n    }\\n\\n    function attest(bytes calldata _quote, Registration calldata _reg) external returns (TcbId) {\\n        Quote memory quote = _parseQuote(_quote);\\n        _validateRegistration(quote.userdata, _reg);\\n        TcbId tcbId = _getTcbId(quote);\\n        attestations[_reg.registrant][tcbId] = Attestation({expiry: _reg.tokenExpiry});\\n        emit Attested(_reg.registrant, tcbId, quote);\\n        return tcbId;\\n    }\\n\\n    function getTcbId(bytes calldata _quote) external view returns (TcbId) {\\n        Quote memory quote = _parseQuote(_quote);\\n        return _getTcbId(quote);\\n    }\\n\\n    function isAttested(address _whom, TcbId _tcbId) external view returns (bool) {\\n        return attestations[_whom][_tcbId].expiry > block.timestamp;\\n    }\\n\\n    function setTrustedSender(address _whom) external onlyOwner {\\n        trustedSender = _whom;\\n    }\\n\\n    function _getTcbId(Quote memory quote) internal view returns (TcbId) {\\n        return TcbId.wrap(keccak256(abi.encode(quote.measurementHash, \\\"mock tcb\\\", block.chainid)));\\n    }\\n\\n    function _parseQuote(bytes calldata _quote) internal view returns (Quote memory quote) {\\n        quote = abi.decode(_quote, (Quote));\\n        if (msg.sender != trustedSender) revert InvalidQuote(); // mock verification\\n    }\\n\\n    function _validateRegistration(\\n        bytes32 _expectedHash,\\n        Registration calldata _reg\\n    ) internal view {\\n        if (keccak256(abi.encode(_reg)) != _expectedHash) revert MismatchedRegistration();\\n        if (blockhash(_reg.baseBlockNumber) != _reg.baseBlockHash || block.timestamp >= _reg.expiry)\\n            revert RegistrationExpired();\\n    }\\n}\\n\",\"keccak256\":\"0x1577528d257ba7e840943ce197708f6faab1e20ea197a81e15915a4ee2a15974\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f61070938819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600254161760025561064690816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816331d1e06314610425575080633ee1b8511461029c578063676604351461024f578063715018a6146101f55780638da5cb5b146101cd578063c36c09e214610185578063f2cb7bad146101405763f2fde38b1461007b57600080fd5b3461013c57602036600319011261013c57610094610464565b9061009d6104ad565b6001600160a01b039182169283156100ea57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461018157806003193601126101815760209181906001600160a01b03610167610464565b168152600184528181206024358252845220549051908152f35b5080fd5b83346101ca5760203660031901126101ca5761019f610464565b6101a76104ad565b60018060a01b03166bffffffffffffffffffffffff60a01b600254161760025580f35b80fd5b505034610181578160031936011261018157905490516001600160a01b039091168152602090f35b83346101ca57806003193601126101ca5761020e6104ad565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5091346101ca5760203660031901126101ca5782359067ffffffffffffffff82116101ca575061029061028a6020946102959336910161047f565b906105ac565b610569565b9051908152f35b50903461013c5760c036600319011261013c5767ffffffffffffffff918035838111610421576102cf903690830161047f565b60a036602319011261041d576102e4916105ac565b6020948582019283519185518881019360243580865260443590818a850152606435928360608601526084359760018060a01b039889811680910361041957608087015260a435958660a082015260a0815261033f81610537565b51902003610409574014908115916103fe575b506103ef5761036085610569565b978751938a850191858310908311176103dc57509287899796937f4aba888be81e9be91c53016251f8de1b2f461c58bb2c33475ced60bd1cfef84c9693829683528352836103ac610553565b16815260018c528181208982528c5220905190556103c8610553565b16938251915182525188820152a351908152f35b634e487b7160e01b845260419052602483fd5b8651623f966f60e61b81528390fd5b905042101538610352565b89516390fa26ab60e01b81528690fd5b8780fd5b8580fd5b8480fd5b8490843461013c578060031936011261013c576020926001600160a01b0361044b610464565b1681526001845281812060243582528452205442108152f35b600435906001600160a01b038216820361047a57565b600080fd5b9181601f8401121561047a5782359167ffffffffffffffff831161047a576020838186019501011161047a57565b6000546001600160a01b031633036104c157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040810190811067ffffffffffffffff82111761052157604052565b634e487b7160e01b600052604160045260246000fd5b60c0810190811067ffffffffffffffff82111761052157604052565b6084356001600160a01b038116810361047a5790565b516040516020810191825260606040820152600860808201526736b7b1b5903a31b160c11b60a082015246606082015260a081526105a681610537565b51902090565b90816040916000602084516105c081610505565b82815201528101031261047a576020604051916105dc83610505565b80358352013560208201526002549091906001600160a01b031633036105fe57565b604051630f86180360e41b8152600490fdfea26469706673582212205c133f5694894b521665dca9e53f1226587aa3b6d6a2e22a8ba20270432f163864736f6c63430008120033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816331d1e06314610425575080633ee1b8511461029c578063676604351461024f578063715018a6146101f55780638da5cb5b146101cd578063c36c09e214610185578063f2cb7bad146101405763f2fde38b1461007b57600080fd5b3461013c57602036600319011261013c57610094610464565b9061009d6104ad565b6001600160a01b039182169283156100ea57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461018157806003193601126101815760209181906001600160a01b03610167610464565b168152600184528181206024358252845220549051908152f35b5080fd5b83346101ca5760203660031901126101ca5761019f610464565b6101a76104ad565b60018060a01b03166bffffffffffffffffffffffff60a01b600254161760025580f35b80fd5b505034610181578160031936011261018157905490516001600160a01b039091168152602090f35b83346101ca57806003193601126101ca5761020e6104ad565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5091346101ca5760203660031901126101ca5782359067ffffffffffffffff82116101ca575061029061028a6020946102959336910161047f565b906105ac565b610569565b9051908152f35b50903461013c5760c036600319011261013c5767ffffffffffffffff918035838111610421576102cf903690830161047f565b60a036602319011261041d576102e4916105ac565b6020948582019283519185518881019360243580865260443590818a850152606435928360608601526084359760018060a01b039889811680910361041957608087015260a435958660a082015260a0815261033f81610537565b51902003610409574014908115916103fe575b506103ef5761036085610569565b978751938a850191858310908311176103dc57509287899796937f4aba888be81e9be91c53016251f8de1b2f461c58bb2c33475ced60bd1cfef84c9693829683528352836103ac610553565b16815260018c528181208982528c5220905190556103c8610553565b16938251915182525188820152a351908152f35b634e487b7160e01b845260419052602483fd5b8651623f966f60e61b81528390fd5b905042101538610352565b89516390fa26ab60e01b81528690fd5b8780fd5b8580fd5b8480fd5b8490843461013c578060031936011261013c576020926001600160a01b0361044b610464565b1681526001845281812060243582528452205442108152f35b600435906001600160a01b038216820361047a57565b600080fd5b9181601f8401121561047a5782359167ffffffffffffffff831161047a576020838186019501011161047a57565b6000546001600160a01b031633036104c157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040810190811067ffffffffffffffff82111761052157604052565b634e487b7160e01b600052604160045260246000fd5b60c0810190811067ffffffffffffffff82111761052157604052565b6084356001600160a01b038116810361047a5790565b516040516020810191825260606040820152600860808201526736b7b1b5903a31b160c11b60a082015246606082015260a081526105a681610537565b51902090565b90816040916000602084516105c081610505565b82815201528101031261047a576020604051916105dc83610505565b80358352013560208201526002549091906001600160a01b031633036105fe57565b604051630f86180360e41b8152600490fdfea26469706673582212205c133f5694894b521665dca9e53f1226587aa3b6d6a2e22a8ba20270432f163864736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "MismatchedRegistration()": [
        {
          "notice": "The quote did not link to the registration bundle."
        }
      ],
      "RegistrationExpired()": [
        {
          "notice": "The registration has expired."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 376,
        "contract": "contracts/enclave-identity/AttestationToken.sol:AttestationToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 556,
        "contract": "contracts/enclave-identity/AttestationToken.sol:AttestationToken",
        "label": "attestations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_userDefinedValueType(TcbId)509,t_struct(Attestation)538_storage))"
      },
      {
        "astId": 559,
        "contract": "contracts/enclave-identity/AttestationToken.sol:AttestationToken",
        "label": "trustedSender",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_userDefinedValueType(TcbId)509,t_struct(Attestation)538_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(TcbId => struct AttestationToken.Attestation))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_userDefinedValueType(TcbId)509,t_struct(Attestation)538_storage)"
      },
      "t_mapping(t_userDefinedValueType(TcbId)509,t_struct(Attestation)538_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(TcbId)509",
        "label": "mapping(TcbId => struct AttestationToken.Attestation)",
        "numberOfBytes": "32",
        "value": "t_struct(Attestation)538_storage"
      },
      "t_struct(Attestation)538_storage": {
        "encoding": "inplace",
        "label": "struct AttestationToken.Attestation",
        "members": [
          {
            "astId": 537,
            "contract": "contracts/enclave-identity/AttestationToken.sol:AttestationToken",
            "label": "expiry",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(TcbId)509": {
        "encoding": "inplace",
        "label": "TcbId",
        "numberOfBytes": "32"
      }
    }
  }
}