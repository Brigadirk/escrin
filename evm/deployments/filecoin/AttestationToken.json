{
  "address": "0xde5dab93f9008d4a2a746eb4e3903bf835d8c7d4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedSender",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidQuote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedRegistration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RegistrationExpired",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "TcbId",
          "name": "tcbId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "measurementHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "userdata",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct AttestationToken.Quote",
          "name": "quote",
          "type": "tuple"
        }
      ],
      "name": "Attested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_quote",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseBlockNumber",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "baseBlockHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "registrant",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenExpiry",
              "type": "uint256"
            }
          ],
          "internalType": "struct AttestationToken.Registration",
          "name": "_reg",
          "type": "tuple"
        }
      ],
      "name": "attest",
      "outputs": [
        {
          "internalType": "TcbId",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "TcbId",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "attestations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_quote",
          "type": "bytes"
        }
      ],
      "name": "getTcbId",
      "outputs": [
        {
          "internalType": "TcbId",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whom",
          "type": "address"
        },
        {
          "internalType": "TcbId",
          "name": "_tcbId",
          "type": "bytes32"
        }
      ],
      "name": "isAttested",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_whom",
          "type": "address"
        }
      ],
      "name": "setTrustedSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x53619616173ba6203c781bdfc996e4ba27dd2b9e7af1a0759a37aaa510d2e2bc",
  "receipt": {
    "to": null,
    "from": "0x3ba9f711c9808902f6a200d3715ba8a7e4d8b63f",
    "contractAddress": "0xde5dab93f9008d4a2a746eb4e3903bf835d8c7d4",
    "transactionIndex": "0x42",
    "gasUsed": "0x3f92996",
    "logsBloom": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
    "blockHash": "0x659df529b907bb2d78027ba77c49532b0b41639e2dcff2ed529f4ceb398f332f",
    "transactionHash": "0x53619616173ba6203c781bdfc996e4ba27dd2b9e7af1a0759a37aaa510d2e2bc",
    "logs": [
      {
        "address": "0xde5dab93f9008d4a2a746eb4e3903bf835d8c7d4",
        "data": "0x",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003ba9f711c9808902f6a200d3715ba8a7e4d8b63f"
        ],
        "removed": false,
        "logIndex": "0x0",
        "transactionIndex": "0x42",
        "transactionHash": "0x53619616173ba6203c781bdfc996e4ba27dd2b9e7af1a0759a37aaa510d2e2bc",
        "blockHash": "0x659df529b907bb2d78027ba77c49532b0b41639e2dcff2ed529f4ceb398f332f",
        "blockNumber": "0x2b3b88"
      }
    ],
    "blockNumber": "0x2b3b88",
    "cumulativeGasUsed": "0x0",
    "status": "0x1"
  },
  "args": [
    "0x7Df2e133FCFF612aA46995E82A54335F716B66be"
  ],
  "numDeployments": 1,
  "solcInputHash": "9a78d2354af0fbf02b37e026e3bfcca5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedSender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidQuote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegistrationExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"TcbId\",\"name\":\"tcbId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"measurementHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"userdata\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct AttestationToken.Quote\",\"name\":\"quote\",\"type\":\"tuple\"}],\"name\":\"Attested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_quote\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"baseBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"registrant\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExpiry\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationToken.Registration\",\"name\":\"_reg\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"TcbId\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"TcbId\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"attestations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_quote\",\"type\":\"bytes\"}],\"name\":\"getTcbId\",\"outputs\":[{\"internalType\":\"TcbId\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whom\",\"type\":\"address\"},{\"internalType\":\"TcbId\",\"name\":\"_tcbId\",\"type\":\"bytes32\"}],\"name\":\"isAttested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whom\",\"type\":\"address\"}],\"name\":\"setTrustedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"MismatchedRegistration()\":[{\"notice\":\"The quote did not link to the registration bundle.\"}],\"RegistrationExpired()\":[{\"notice\":\"The registration has expired.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/enclave-identity/AttestationToken.sol\":\"AttestationToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":4294967295},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/enclave-identity/AttestationToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ntype TcbId is bytes32;\\n\\n/// The quote did not link to the registration bundle.\\nerror MismatchedRegistration(); // kPomqw== 90fa26ab\\n/// The registration has expired.\\nerror RegistrationExpired(); // D+WbwA== 0fe59bc0\\nerror InvalidQuote(); // +GGAMA== f8618030\\n\\ncontract AttestationToken is Ownable {\\n    struct Quote {\\n        bytes32 measurementHash;\\n        bytes32 userdata;\\n    }\\n\\n    struct Registration {\\n        uint256 baseBlockNumber;\\n        bytes32 baseBlockHash;\\n        uint256 expiry;\\n        address registrant;\\n        uint256 tokenExpiry;\\n    }\\n\\n    struct Attestation {\\n        uint256 expiry;\\n    }\\n\\n    event Attested(address indexed requester, TcbId indexed tcbId, Quote quote);\\n\\n    mapping(address => mapping(TcbId => Attestation)) public attestations;\\n\\n    /// Mock attestation component.\\n    address private trustedSender;\\n\\n    constructor(address _trustedSender) {\\n        trustedSender = _trustedSender;\\n    }\\n\\n    function attest(bytes calldata _quote, Registration calldata _reg) external returns (TcbId) {\\n        Quote memory quote = _parseQuote(_quote);\\n        _validateRegistration(quote.userdata, _reg);\\n        TcbId tcbId = _getTcbId(quote);\\n        attestations[_reg.registrant][tcbId] = Attestation({expiry: _reg.tokenExpiry});\\n        emit Attested(_reg.registrant, tcbId, quote);\\n        return tcbId;\\n    }\\n\\n    function getTcbId(bytes calldata _quote) external view returns (TcbId) {\\n        Quote memory quote = _parseQuote(_quote);\\n        return _getTcbId(quote);\\n    }\\n\\n    function isAttested(address _whom, TcbId _tcbId) external view returns (bool) {\\n        return attestations[_whom][_tcbId].expiry > block.timestamp;\\n    }\\n\\n    function setTrustedSender(address _whom) external onlyOwner {\\n        trustedSender = _whom;\\n    }\\n\\n    function _getTcbId(Quote memory quote) internal view returns (TcbId) {\\n        return TcbId.wrap(keccak256(abi.encode(quote.measurementHash, \\\"mock tcb\\\", block.chainid)));\\n    }\\n\\n    function _parseQuote(bytes calldata _quote) internal view returns (Quote memory quote) {\\n        quote = abi.decode(_quote, (Quote));\\n        if (msg.sender != trustedSender) revert InvalidQuote(); // mock verification\\n    }\\n\\n    function _validateRegistration(\\n        bytes32 _expectedHash,\\n        Registration calldata _reg\\n    ) internal view {\\n        if (keccak256(abi.encode(_reg)) != _expectedHash) revert MismatchedRegistration();\\n        if (blockhash(_reg.baseBlockNumber) != _reg.baseBlockHash || block.timestamp >= _reg.expiry)\\n            revert RegistrationExpired();\\n    }\\n}\\n\",\"keccak256\":\"0xbbb2a53ff501f5ee5c13d2ea4304f6f821da8fed39d74736f2cd9ddcc2a53286\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f6109be38819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360025416176002556108fb90816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816331d1e0631461061d575080633ee1b851146104005780636766043514610395578063715018a6146102f95780638da5cb5b146102a8578063c36c09e214610223578063f2cb7bad146101b45763f2fde38b1461007b57600080fd5b346101b05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b0576100b2610687565b906100bb6106dd565b73ffffffffffffffffffffffffffffffffffffffff80921692831561012d5750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50503461021f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021f578060209273ffffffffffffffffffffffffffffffffffffffff610205610687565b168152600184528181206024358252845220549051908152f35b5080fd5b83346102a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102a55773ffffffffffffffffffffffffffffffffffffffff610270610687565b6102786106dd565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025580f35b80fd5b50503461021f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021f5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b83346102a557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102a5576103306106dd565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5091346102a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102a55782359067ffffffffffffffff82116102a557506103f46103ee6020946103f9933691016106af565b9061083e565b6107e6565b9051908152f35b5090346101b05760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b05767ffffffffffffffff9180358381116106195761045190369083016106af565b60a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360112610615576104849161083e565b6020948582019283519185518881019360243580865260443590818a850152606435928360608601526084359773ffffffffffffffffffffffffffffffffffffffff9889811680910361061157608087015260a435958660a082015260a081526104ed816107a7565b519020036105e9574014908115916105de575b506105b65761050e856107e6565b978751938a8501918583109083111761058a57509287899796937f4aba888be81e9be91c53016251f8de1b2f461c58bb2c33475ced60bd1cfef84c96938296835283528361055a6107c3565b16815260018c528181208982528c5220905190556105766107c3565b16938251915182525188820152a351908152f35b8360416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8287517f0fe59bc0000000000000000000000000000000000000000000000000000000008152fd5b905042101538610500565b858a517f90fa26ab000000000000000000000000000000000000000000000000000000008152fd5b8780fd5b8580fd5b8480fd5b849084346101b057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b05760209273ffffffffffffffffffffffffffffffffffffffff61066e610687565b1681526001845281812060243582528452205442108152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036106aa57565b600080fd5b9181601f840112156106aa5782359167ffffffffffffffff83116106aa57602083818601950101116106aa57565b73ffffffffffffffffffffffffffffffffffffffff6000541633036106fe57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040810190811067ffffffffffffffff82111761077857604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60c0810190811067ffffffffffffffff82111761077857604052565b60843573ffffffffffffffffffffffffffffffffffffffff811681036106aa5790565b516040516020810191825260606040820152600860808201527f6d6f636b2074636200000000000000000000000000000000000000000000000060a082015246606082015260a08152610838816107a7565b51902090565b90816040916000602084516108528161075c565b8281520152810103126106aa5760206040519161086e8361075c565b80358352013560208201529073ffffffffffffffffffffffffffffffffffffffff60025416330361089b57565b60046040517ff8618030000000000000000000000000000000000000000000000000000000008152fdfea264697066735822122019914b891db261e01c0c45051563cf5e571f69ac4b08d0ca29513ef6d29a1cec64736f6c63430008120033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816331d1e0631461061d575080633ee1b851146104005780636766043514610395578063715018a6146102f95780638da5cb5b146102a8578063c36c09e214610223578063f2cb7bad146101b45763f2fde38b1461007b57600080fd5b346101b05760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b0576100b2610687565b906100bb6106dd565b73ffffffffffffffffffffffffffffffffffffffff80921692831561012d5750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50503461021f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021f578060209273ffffffffffffffffffffffffffffffffffffffff610205610687565b168152600184528181206024358252845220549051908152f35b5080fd5b83346102a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102a55773ffffffffffffffffffffffffffffffffffffffff610270610687565b6102786106dd565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600254161760025580f35b80fd5b50503461021f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021f5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b83346102a557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102a5576103306106dd565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5091346102a55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102a55782359067ffffffffffffffff82116102a557506103f46103ee6020946103f9933691016106af565b9061083e565b6107e6565b9051908152f35b5090346101b05760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b05767ffffffffffffffff9180358381116106195761045190369083016106af565b60a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360112610615576104849161083e565b6020948582019283519185518881019360243580865260443590818a850152606435928360608601526084359773ffffffffffffffffffffffffffffffffffffffff9889811680910361061157608087015260a435958660a082015260a081526104ed816107a7565b519020036105e9574014908115916105de575b506105b65761050e856107e6565b978751938a8501918583109083111761058a57509287899796937f4aba888be81e9be91c53016251f8de1b2f461c58bb2c33475ced60bd1cfef84c96938296835283528361055a6107c3565b16815260018c528181208982528c5220905190556105766107c3565b16938251915182525188820152a351908152f35b8360416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8287517f0fe59bc0000000000000000000000000000000000000000000000000000000008152fd5b905042101538610500565b858a517f90fa26ab000000000000000000000000000000000000000000000000000000008152fd5b8780fd5b8580fd5b8480fd5b849084346101b057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b05760209273ffffffffffffffffffffffffffffffffffffffff61066e610687565b1681526001845281812060243582528452205442108152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036106aa57565b600080fd5b9181601f840112156106aa5782359167ffffffffffffffff83116106aa57602083818601950101116106aa57565b73ffffffffffffffffffffffffffffffffffffffff6000541633036106fe57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6040810190811067ffffffffffffffff82111761077857604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60c0810190811067ffffffffffffffff82111761077857604052565b60843573ffffffffffffffffffffffffffffffffffffffff811681036106aa5790565b516040516020810191825260606040820152600860808201527f6d6f636b2074636200000000000000000000000000000000000000000000000060a082015246606082015260a08152610838816107a7565b51902090565b90816040916000602084516108528161075c565b8281520152810103126106aa5760206040519161086e8361075c565b80358352013560208201529073ffffffffffffffffffffffffffffffffffffffff60025416330361089b57565b60046040517ff8618030000000000000000000000000000000000000000000000000000000008152fdfea264697066735822122019914b891db261e01c0c45051563cf5e571f69ac4b08d0ca29513ef6d29a1cec64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "MismatchedRegistration()": [
        {
          "notice": "The quote did not link to the registration bundle."
        }
      ],
      "RegistrationExpired()": [
        {
          "notice": "The registration has expired."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 376,
        "contract": "contracts/enclave-identity/AttestationToken.sol:AttestationToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 786,
        "contract": "contracts/enclave-identity/AttestationToken.sol:AttestationToken",
        "label": "attestations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_userDefinedValueType(TcbId)739,t_struct(Attestation)768_storage))"
      },
      {
        "astId": 789,
        "contract": "contracts/enclave-identity/AttestationToken.sol:AttestationToken",
        "label": "trustedSender",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_userDefinedValueType(TcbId)739,t_struct(Attestation)768_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(TcbId => struct AttestationToken.Attestation))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_userDefinedValueType(TcbId)739,t_struct(Attestation)768_storage)"
      },
      "t_mapping(t_userDefinedValueType(TcbId)739,t_struct(Attestation)768_storage)": {
        "encoding": "mapping",
        "key": "t_userDefinedValueType(TcbId)739",
        "label": "mapping(TcbId => struct AttestationToken.Attestation)",
        "numberOfBytes": "32",
        "value": "t_struct(Attestation)768_storage"
      },
      "t_struct(Attestation)768_storage": {
        "encoding": "inplace",
        "label": "struct AttestationToken.Attestation",
        "members": [
          {
            "astId": 767,
            "contract": "contracts/enclave-identity/AttestationToken.sol:AttestationToken",
            "label": "expiry",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(TcbId)739": {
        "encoding": "inplace",
        "label": "TcbId",
        "numberOfBytes": "32"
      }
    }
  }
}